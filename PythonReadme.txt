PS：由于本人在学习python前已经学过Java和C语言，所以有些内容可能不适合纯小白，
    若是有对于基础部分不懂的可以参照我Java-learing-dairy仓库中的JavaReadme文件
        (请忽略我的dairy拼写错误，就这么搜索就可以了)
Python小白学习py中......


python尤其要讲究语法缩进，请记住[否则将会出现很多问题]
命名python文件名时请尽量不要与python标准类库名重复，因为python在引用函数时会先在本地寻找文件
相关指令：
    pip install
    pip uninstall
    pip install xxx==版本号
    pip freeze > requirements.txt   [将pip安装的插件的版本用叫做requirments.txt]
    help()  [在括号内输入关键字和内置函数名能够查询该词的使用方法]
py语句不需要分号完结句尾。
py是一种面向对象的解释型语言，属于弱类型[给什么类型就会生成什么类型，同样变量可以赋不同值]。
print("python大多数情况下单引号和双引号没有区别")
记住中英文标点符号的问题，防止弄错。
py部分关键字：
    'False', 'None', 'True', 'and', 'as', 
    'assert', 'break', 'class', 'continue', 
    'def', 'del', 'elif', 'else', 'except', 
    'finally', 'for', 'from', 'global', 'if',
    'import', 'in', 'is', 'lambda', 'nonlocal', 
    'not', 'or', 'pass', 'raise', 'return', 'try',
    'while', 'with', 'yield'
    Print：打印
    Defined(defined)：定义
    syntaxError：语法错误
    NameError：名字错误
    Invalid：无效的
    function：函数
    Built-in(Builtins)：内置
    Module：模块
    Value：值
    Raise：抛出/扔出
    identify：特征

python的注释方法：
    #用来注释该行
    '''    '''用来注释某一区块

变量：
    和Java的命名规范差不多
    命名规则：
        1.只能由数字、字母、下划线_、$组成，不能含有其他特殊符号
        2.不能以数字开头
        3.区分大小写
        4.不能使用关键字做标识符
        5.没有长度限制（但不要太长）
    命名规范（不强制，不会报错）：
        1.见名知义（如：UserLogin，Password等等）
        2.最好驼峰式命名（SystemService，PasswordLogin等等）
    类名、接口名：首字母大写，后面每个单词首字母大写
    变量名、方法名：首字母小写，后面的每个单词首字母大写
    常量名：全部大写
    不合法标识符举例：123、123sb、傻哔、Hello-World、Hello World、HelloWorld#
    变量的声明实际上时给变量开辟内存空间

常量：
    命名规范：大写就行

print函数：
    属于内置函数
    sep是分隔符，默认是空格，可以使用sep=''来自定分隔符
    \n是换行符，print默认换行
    默认end是\n，可以使用end=''自定
    \t是相当于tab键的作用
    单双引号可以嵌套使用，但不可以同单/双引号嵌套
    格式化输出：
        字符串和变量的混合输出可以和Java一样，使用“+”字符连接
        也可以使用%s加变量名，然后再最后用%()，里面再次依次输入变量名[和C语言类似]
        举例：
            print('这是a：' + a + '这是b：' + b)
            print('这是a：%s，这是b：%s' % (a,b))
        第二个被称作格式化输出，且不限于数据类型
        第一行的使用“+”有一定的弊端：+两边的数据类型要相同，否则会报错
        也可以使用占位符{}来输出
            语句格式：变量名1
                      变量名2 = '字符串{}字符串'.format(变量名1)
                      【或者】
                      print('{}'.format(变量名1))
            这种输出不限制变量的数据类型

转义字符：
    使用\可以作为转义字符
    常见的转义字符：
        \n    换行
        \t    起到tab键的作用“即首行缩进四格”
        \r    回车打印头回到行首，如果没有\n直接使用\r的话会直接覆盖这一行在/r之前的内容[Pycharm无法使用\r]
        \'    去除'的特殊化
        \"    去除"的特殊化
        \\    去除\的特殊化
    使用字符r''可以原样输出字符串的内容，转义字符失效

字符串：
    命名规则：使用' '，" ",''' '''就被当作字符串
    ''' '''中的字符串是保持样式输出，即可以写一大段的具有格式的文本

数据类型：
    大部分和Java，C语言一样
    数据类型的强制转换：
        转换后的数据类型(转换前的数据类型)  #括号内直接填写数据即可
        例：
            a = 10
            print('这个数字是' + str(a))
        小贴士：实际上print函数中的%s就是将对应数据转换成字符串，即%s是str的简写
                同理%d是digit的简写[digit为数字]，%f是float的简写[float为浮点型]
                %.1f表示浮点数四舍五入为小数位只有一位，以此类推
        注意：1.%d无法强制转换带有中文英文的字符串
              2.%d或者int()强制转换的浮点型会直接取整
              3.%f中的四舍五入是5以后才会进一[不知道是不是我编译器版本的原因。。]
              4.占位符则完全不用担心字符串和整型的冲突，但需要注意一一对应


输入语句：
    语句格式：变量名 = input()
              print(变量名)
    注意：input语句输入的类型都是字符串类型，所以在输出时需要注意数据类型的对应


运算符：
    赋值运算符：=
        不同的变量名若是内容相同，则指向的内存地址也相同，即内容只有一个，只是不同的变量名指向于它
        若是给变量重新赋于上一次不同的值后，变量指向的内存地址就会改变
        小贴士：id()是一个函数[即identify：特征]，会输出指定对象的内存地址
        注意：在源文件中内容相同则地址相同，而在终端的交互界面写代码时若是数值超过256，则就算内容相同地址也不相同
              原因：终端的交互式界面是写一句执行一句，相当于每一句都是一个独立的对象
                    python的交互式的内存中会自带一个小整数对象池，在数值小于256时会直接指向该池中的对应地址
        引申运算符：+=
                    -=
                    *=
                    /=
                    ......
        +=在python中若是两边都是整型则其中+是运算符，若是字符串则是连接符
          所以只有+=可以适用于字符串的连接，其他引申的运算符只能运用于数学计算
    算术运算符：+ - * / ** //
        a ** b 表示数字a的b次方[a与a相乘b次]
        a // b 表示a整除于b，与/不相同的地方在于/在相除的时候是浮点型，而//是整型
    比较运算符：==
                <
                <=
                >
                >=
                !=
                is[相当于==]
                is not[相当于!=]
                and：逻辑与
                or ：逻辑或
                not：逻辑非
    进制转换：
        python中表示不同进制的格式：
            0b 二进制数值
            0o 八进制数值
            0x 十六进制数值
        bin()函数可以用来显示某个数字的二进制位，表示为0b 二进制表示，同理定义一个二进制数可以用int来表示它的十进制位
            例：print(bin(3))
                输出为0b 11
            注意：若是用bin()函数表示负数的话解释器中的0b前面会显示负号
        小贴士：电脑中的所有数值都是补码过后的，补码方法为取反再加一，可以通过这一原理还原原码
                在一般的面试中若是求某负数的二进制位一般都是求的补码
    位运算符：& 与[将所有位数比较，都为1则该位结果为1，否则为0]
              | 或[将所有位数比较，都为0则该位结果为0，否则为1]
              ~ 取反
              ^ 异或[相同则为0，不同则为1]
              <<左移[a<<b指a移b位]
              >>右移
              注意：所有的位运算都是在补码层次上运行的，且第一位必须表示为符号位且符号位不随着数值位数的改变而改变
                    以5和-5举例：[一般都是8的倍数位来进行位运算，即1也写成0000 0001]1010
                    
                    5 & -5： 0 1 0 1
                             1 0 1 1   
                            --------- 
                             0 0 0 1 

                    5 | -5： 0 1 0 1
                             1 0 1 1
                            ---------
                             1 1 0 1[这是-1的补码]

                    ~ -5  ： 1 0 1 1
                            ---------
                             0 1 0 0

                    5 ^ -5:  0 1 0 1
                             1 0 1 1
                            ---------
                             1 1 1 0[这是-2的补码]

                    5 << 2:  0 0 0 0 0 1 0 1
                            ---------------------
                             0 0 0 1 0 1 0 0

                    -5 << 2: 1 1 1 1 1 0 1 1
                            ---------------------
                             1 1 1 0 1 1 0 0[这是-20的补码]也可写为:1011->101100->101011->010100

                    5 >> 2:  0 0 0 0 0 1 0 1
                            ---------------------
                             0 0 0 0 0 0 0 1

                    -5 >> 2: 1 1 1 1 1 0 1 1
                            ---------------------
                             1 1 1 1 1 1 1 0[这是-2的补码]
    三元运算符：
        格式：表达式1 if 布尔表达式 else 表达式2
              若布尔表达式为真则运行表达式1，为假则运行表达式2[和Java有所不同，因为python中没有"?"]
    运算符优先级[从上到下，从左到右，优先级依次降低][不需要强行记忆]
        **
        ~
        + - [这里是符号运算符]
        * / // %
        + - [这里是算术运算符]
        << >>
        &
        ^
        |
        == != > >= < <=
        is   is not
        not
        and
        or


语句：
    条件判断语句：if、if else [python中没有switch语句]
        if语句格式：if 布尔表达式:
                        语句
                        语句

        if else语句表达式：
                    if 布尔表达式:
                        语句
                    else :
                        语句
        if嵌套：    if 布尔表达式:
                        语句
                        if 布尔表达式:
                            语句
                            if 布尔表达式:
                                语句
                                ......
        if else嵌套:if 布尔表达式:
                        语句
                        if 布尔表达式
                            语句
                            ......
                    else ：
                        语句
                        if 布尔表达式
                            语句
                            ......
                        else :
                            语句
                            if 布尔表达式:
                                语句
                                ......
        else if语句:if 布尔表达式:
                        语句
                    elif 布尔表达式:
                        语句
                    elif 布尔表达式:
                        语句
                        ......
                    else :
                        语句
        python中的if语句中判断语句只要是空值''(或者0/null)默认是false
        python中可以使用random类库的randint函数来应用随机数的情况
    循环语句：for
        for循环语句格式： for 变量名 in 集合 :
                              语句
        小贴士：range()可以完成一个系统对范围的指定
                如range(8)表示限制到0~8的范围[包括0但不包括8，即0 1 2 3 4  5 6 7]
    跳转语句：
